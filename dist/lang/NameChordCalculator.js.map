{"version":3,"file":"NameChordCalculator.js","sourceRoot":"","sources":["../../src/lang/NameChordCalculator.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,qBAAqB,EAAE,MAAM,2CAA2C,CAAC;AAElF,OAAO,EAAE,iBAAiB,EAAE,MAAM,+BAA+B,CAAC;AAElE,MAAM,OAAO,mBAAmB;IAI5B,YAAoB,KAAqB,EAAU,eAA4B;QAA3D,UAAK,GAAL,KAAK,CAAgB;QAAU,oBAAe,GAAf,eAAe,CAAa;IAC/E,CAAC;IAEM,GAAG;QACN,IAAI,CAAC,OAAO,GAAG,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACtD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,CAAC;QAEjD,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;IACvF,CAAC;IAEO,WAAW;QACf,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAC9D,CAAC;IAEO,aAAa;QACjB,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO;YACpC,OAAO,EAAE,CAAC;QAEd,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC,QAAQ,EAAE,CAAC;QAE1D,OAAO,GAAG,CAAC;IACf,CAAC;IAEO,uBAAuB;QAC3B,IAAI,KAAK,GAAW,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC7D,IAAI,gBAAgB,GAAW,IAAI,CAAC,OAAO,CAAC,uBAAuB,EAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAClG,IAAI,iBAAiB,GAAG,iBAAiB,CAAC,iBAAiB,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;QACrF,OAAO,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;IAC9D,CAAC;CACJ","sourcesContent":["import { ChromaticChord } from '../chords/chromatic/ChromaticChord';\r\nimport { ChromaticChordPattern } from '../chords/chromatic/ChromaticChordPattern';\r\nimport { DiatonicAlt } from '../degrees/DiatonicAlt';\r\nimport { IntervalChromatic } from '../interval/IntervalChromatic';\r\n\r\nexport class NameChordCalculator {\r\n    private pattern: ChromaticChordPattern;\r\n    private inversion: number;\r\n\r\n    constructor(private chord: ChromaticChord, private rootDiatonicAlt: DiatonicAlt) {\r\n    }\r\n\r\n    public get(): string {\r\n        this.pattern = ChromaticChordPattern.from(this.chord);\r\n        this.inversion = this.chord.getInversionNumber();\r\n\r\n        return this.rootDiatonicAlt.toString() + this.patternName() + this.inversionName();\r\n    }\r\n\r\n    private patternName(): string {\r\n        return (this.pattern ? this.pattern.toStringShort() : '');\r\n    }\r\n\r\n    private inversionName(): string {\r\n        if (this.inversion == 0 || !this.pattern)\r\n            return \"\";\r\n\r\n        let str = \"/\" + this.getInversionDiatonicAlt().toString();\r\n\r\n        return str;\r\n    }\r\n\r\n    private getInversionDiatonicAlt(): DiatonicAlt {\r\n        let semis: number = this.pattern.getValues()[this.inversion];\r\n        let intervalDiatonic: number = this.pattern.getDiatonicChordPattern().getValues()[this.inversion];\r\n        let intervalChromatic = IntervalChromatic.fromSemisAndNotes(semis, intervalDiatonic);\r\n        return this.rootDiatonicAlt.getShifted(intervalChromatic);\r\n    }\r\n}"]}