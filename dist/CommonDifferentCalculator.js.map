{"version":3,"file":"CommonDifferentCalculator.js","sourceRoot":"","sources":["../src/CommonDifferentCalculator.ts"],"names":[],"mappings":"AAEA,MAAM,OAAO,yBAAyB;IAIlC,YAA4B,MAAe;QAAf,WAAM,GAAN,MAAM,CAAS;QAHnC,WAAM,GAAG,IAAI,GAAG,EAAU,CAAC;QAC3B,cAAS,GAAG,IAAI,GAAG,EAAU,CAAC;IAGtC,CAAC;IAEM,MAAM,CAAC,IAAI,CAAC,MAAe;QAC9B,OAAO,IAAI,yBAAyB,CAAC,MAAM,CAAC,CAAC;IACjD,CAAC;IAEM,SAAS;QACZ,IAAI,CAAC,+BAA+B,EAAE,CAAC;QACvC,IAAI,CAAC,iCAAiC,EAAE,CAAC;IAC7C,CAAC;IAEO,+BAA+B;QACnC,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,MAAM,EAAE;YAC3B,IAAI,iBAAiB,GAAG,KAAK,CAAC,oBAAoB,EAAE,CAAC;YACrD,KAAK,IAAI,gBAAgB,IAAI,iBAAiB;gBAC1C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;SACzC;IACL,CAAC;IAEO,iCAAiC;QACrC,OAAO,EAAE,KAAK,IAAI,gBAAgB,IAAI,IAAI,CAAC,MAAM;YAC7C,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,MAAM,EAAE;gBAC3B,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,EAAE;oBAC9C,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAA;oBACpC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;oBACrC,SAAS,OAAO,CAAC;iBACpB;aACJ;IACT,CAAC;IAEM,SAAS;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAEM,YAAY;QACf,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;CACJ","sourcesContent":["import { Scale } from './tonality/Scale';\r\n\r\nexport class CommonDifferentCalculator {\r\n    private common = new Set<number>();\r\n    private different = new Set<number>();\r\n\r\n    private constructor(private scales: Scale[]) {\r\n    }\r\n\r\n    public static from(scales: Scale[]): CommonDifferentCalculator {\r\n        return new CommonDifferentCalculator(scales);\r\n    }\r\n\r\n    public calculate(): void {\r\n        this.addAllAbsoluteIntervalsToCommon();\r\n        this.removeAbsoluteIntervalsFromCommon();\r\n    }\r\n\r\n    private addAllAbsoluteIntervalsToCommon(): void {\r\n        for (let scale of this.scales) {\r\n            let absoluteIntervals = scale.getAbsoluteIntervals();\r\n            for (let absoluteInterval of absoluteIntervals)\r\n                this.common.add(absoluteInterval);\r\n        }\r\n    }\r\n\r\n    private removeAbsoluteIntervalsFromCommon(): void {\r\n        mainFor: for (let absoluteInterval of this.common)\r\n            for (let scale of this.scales) {\r\n                if (!scale.hasAbsoluteInterval(absoluteInterval)) {\r\n                    this.common.delete(absoluteInterval)\r\n                    this.different.add(absoluteInterval);\r\n                    continue mainFor;\r\n                }\r\n            }\r\n    }\r\n\r\n    public getCommon(): Set<number> {\r\n        return this.common;\r\n    }\r\n\r\n    public getDifferent(): Set<number> {\r\n        return this.different;\r\n    }\r\n}"]}