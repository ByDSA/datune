{"version":3,"file":"Utils.js","sourceRoot":"","sources":["../src/Utils.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,MAAM,SAAS,CAAC;AAE9B,MAAM,OAAO,KAAK;IAChB,MAAM,CAAC,WAAW,CAAC,GAAW;QAC5B,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC;IACD,MAAM,CAAC,WAAW,CAAI,KAAU,EAAE,IAAO;QACvC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;IACvC,CAAC;IACM,MAAM,CAAC,aAAa,CAAC,CAAM,EAAE,IAAa;QAC/C,IAAI,CAAC,KAAK,SAAS,IAAI,CAAC,KAAK,IAAI;YAC/B,MAAM,IAAI,KAAK,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,uBAAuB,CAAC,CAAC;IAC7F,CAAC;IAEM,MAAM,CAAC,WAAW,CAAI,GAAQ,EAAE,CAAS,EAAE,OAAO,GAAG,KAAK;QAC/D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;YACxB,IAAI,OAAO;gBACT,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;;gBAEvB,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;QAC1B,OAAO,GAAG,CAAC;IACb,CAAC;IAEM,MAAM,CAAC,WAAW,CAAI,GAAW,EAAE,KAAU;QAClD,KAAK,IAAI,CAAC,IAAI,KAAK;YACjB,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACf,CAAC;IAED,kHAAkH;IAC3G,MAAM,CAAC,eAAe,CAAC,CAAS;QACrC,IAAI,KAAK,CAAC,CAAC,CAAC;YACV,OAAO,KAAK,CAAC;QACf,IAAI,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,EAC/B,GAAG,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI;YAC/D,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI;YAC1D,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,EAC7D,KAAK,GAAG,EAAE,EACV,CAAC,GAAG,CAAC,CAAC;QACR,OAAO,CAAC,EAAE;YACR,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,KAAK,CAAC;QACxD,OAAO,KAAK,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;IACvD,CAAC;IAIM,MAAM,CAAC,SAAS,CAAC,KAAY;QAClC,OAAO,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;;AAJc,aAAO,GAAG,IAAI,OAAO,EAAE,CAAC","sourcesContent":["import Hashids from 'hashids';\r\n\r\nexport class Utils {\r\n  static cloneString(str: String): string {\r\n    return (' ' + str).slice(1);\r\n  }\r\n  static arrayRemove<T>(array: T[], item: T): void {\r\n    array.splice(array.indexOf(item), 1);\r\n  }\r\n  public static assertNotNull(v: any, name?: string): void {\r\n    if (v === undefined || v === null)\r\n      throw new Error(\"Variable \" + (name ? \"'\" + name + \"' \" : '') + \"is null or undefined.\");\r\n  }\r\n\r\n  public static arrayRotate<T>(arr: T[], n: number, reverse = false): T[] {\r\n    for (let i = 0; i < n; i++)\r\n      if (reverse)\r\n        arr.unshift(arr.pop());\r\n      else\r\n        arr.push(arr.shift());\r\n    return arr;\r\n  }\r\n\r\n  public static setAddArray<T>(set: Set<T>, array: T[]): void {\r\n    for (let e of array)\r\n      set.add(e);\r\n  }\r\n\r\n  // Source: https://stackoverflow.com/questions/9083037/convert-a-number-into-a-roman-numeral-in-javascript/9083076\r\n  public static getRomanNumeral(n: number): string {\r\n    if (isNaN(n))\r\n      return \"NaN\";\r\n    var digits = String(+n).split(\"\"),\r\n      key = [\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\",\r\n        \"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\",\r\n        \"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"],\r\n      roman = \"\",\r\n      i = 3;\r\n    while (i--)\r\n      roman = (key[+digits.pop() + (i * 10)] || \"\") + roman;\r\n    return Array(+digits.join(\"\") + 1).join(\"M\") + roman;\r\n  }\r\n\r\n  private static hashids = new Hashids();\r\n\r\n  public static hashArray(array: any[]): string {\r\n    return Utils.hashids.encode(array);\r\n  }\r\n}"]}