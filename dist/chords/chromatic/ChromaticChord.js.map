{"version":3,"file":"ChromaticChord.js","sourceRoot":"","sources":["../../../src/chords/chromatic/ChromaticChord.ts"],"names":[],"mappings":"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","sourcesContent":["import { Chromatic } from '../../degrees/Chromatic'\r\nimport { ChromaticChordPattern } from './ChromaticChordPattern';\r\nimport { ChromaticUtils } from '../../degrees/ChromaticUtils';\r\nimport { NameChordCalculator } from '../../lang/NameChordCalculator';\r\nimport { DiatonicAlt } from '../../degrees/DiatonicAlt';\r\nimport { Utils } from '../../Utils';\r\n\r\nexport class ChromaticChord {\r\n    public static C = new ChromaticChord(0, [Chromatic.C, Chromatic.E, Chromatic.G]);\r\n    public static Dm = new ChromaticChord(0, [Chromatic.D, Chromatic.F, Chromatic.A]);\r\n    public static C7 = new ChromaticChord(0, [Chromatic.C, Chromatic.E, Chromatic.G, Chromatic.AA]);\r\n    public static Dm7 = new ChromaticChord(0, [Chromatic.D, Chromatic.F, Chromatic.A, Chromatic.AA]);\r\n\r\n    private constructor(private rootIndex: number, private notes: Chromatic[], private str?: string) {\r\n    }\r\n\r\n    public static fromRootNotes(rootIndex: number, notes: Chromatic[], str?: string): ChromaticChord {\r\n        return new ChromaticChord(rootIndex, notes, str);\r\n    }\r\n\r\n    public static fromRootPattern(root: Chromatic, pattern: ChromaticChordPattern, inversion: number = 0): ChromaticChord {\r\n        let rootPos = this.inversionToRootPos(inversion, pattern.getValues().length);\r\n        let notes: Chromatic[] = [root];\r\n\r\n        let first = true;\r\n        for (let semis of pattern) {\r\n            if (first) {\r\n                first = false;\r\n                continue;\r\n            }\r\n\r\n            let chromaticShifted = ChromaticUtils.getShiftedBySemis(root, semis);\r\n            notes.push(chromaticShifted);\r\n        }\r\n\r\n        return ChromaticChord.fromRootNotes(rootPos, notes);\r\n    }\r\n\r\n    public getRoot(): Chromatic {\r\n        return this.notes[this.rootIndex];\r\n    }\r\n\r\n    private static inversionToRootPos(inv: number, length: number): number {\r\n        return (length - inv) % length;\r\n    }\r\n\r\n    public updateName(rootDiatonicAlt: DiatonicAlt): void {\r\n        Utils.assertNotNull(rootDiatonicAlt);\r\n        this.str = new NameChordCalculator(this, rootDiatonicAlt).get();\r\n    }\r\n\r\n    public getName(): string|undefined {\r\n        return this.str;\r\n    }\r\n\r\n    public getRootIndex(): number {\r\n        return this.rootIndex;\r\n    }\r\n\r\n    public getInversionNumber(): number {\r\n        return (this.notes.length - this.rootIndex) % this.notes.length;\r\n    }\r\n\r\n    public getNotes(): Chromatic[] {\r\n        let notes = Array.from(this.notes);\r\n\r\n        Utils.arrayRotate(notes, this.getRootIndex(), true);\r\n        return notes;\r\n    }\r\n\r\n    public toString(): string|undefined {\r\n        return this.str;\r\n    }\r\n}"]}