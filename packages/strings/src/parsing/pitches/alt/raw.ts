import { A, AA, AAA, AAAA, Ab, Abb, Abbb, B, BB, Bb, BBB, Bbb, BBBB, Bbbb, C, Cb, Cbb, Cbbb, CC, CCC, CCCC, D, Db, Dbb, Dbbb, DD, DDD, DDDD, E, Eb, Ebb, Ebbb, EE, EEE, EEEE, F, Fb, Fbb, Fbbb, FF, FFF, FFFF, G, Gb, Gbb, Gbbb, GG, GGG, GGGG } from "@datune/core/pitches/alt/constants";
import { Pitch } from "@datune/core/pitches/alt";
import { Options } from "parsing";
import { stringifyPitch } from "strings/pitches/alt";
import { normalizeInput } from "../normalizeInput";

export function parseRaw(input: string, options?: Options): Pitch | null {
  switch (input) {
    case normalizeInput(stringifyPitch(C, options)): return C;
    case normalizeInput(stringifyPitch(CC, options)): return CC;
    case normalizeInput(stringifyPitch(CCC, options)): return CCC;
    case normalizeInput(stringifyPitch(CCCC, options)): return CCCC;
    case normalizeInput(stringifyPitch(Cb, options)): return Cb;
    case normalizeInput(stringifyPitch(Cbb, options)): return Cbb;
    case normalizeInput(stringifyPitch(Cbbb, options)): return Cbbb;
    case normalizeInput(stringifyPitch(D, options)): return D;
    case normalizeInput(stringifyPitch(DD, options)): return DD;
    case normalizeInput(stringifyPitch(DDD, options)): return DDD;
    case normalizeInput(stringifyPitch(DDDD, options)): return DDDD;
    case normalizeInput(stringifyPitch(Db, options)): return Db;
    case normalizeInput(stringifyPitch(Dbb, options)): return Dbb;
    case normalizeInput(stringifyPitch(Dbbb, options)): return Dbbb;
    case normalizeInput(stringifyPitch(E, options)): return E;
    case normalizeInput(stringifyPitch(EE, options)): return EE;
    case normalizeInput(stringifyPitch(EEE, options)): return EEE;
    case normalizeInput(stringifyPitch(EEEE, options)): return EEEE;
    case normalizeInput(stringifyPitch(Eb, options)): return Eb;
    case normalizeInput(stringifyPitch(Ebb, options)): return Ebb;
    case normalizeInput(stringifyPitch(Ebbb, options)): return Ebbb;
    case normalizeInput(stringifyPitch(F, options)): return F;
    case normalizeInput(stringifyPitch(FF, options)): return FF;
    case normalizeInput(stringifyPitch(FFF, options)): return FFF;
    case normalizeInput(stringifyPitch(FFFF, options)): return FFFF;
    case normalizeInput(stringifyPitch(Fb, options)): return Fb;
    case normalizeInput(stringifyPitch(Fbb, options)): return Fbb;
    case normalizeInput(stringifyPitch(Fbbb, options)): return Fbbb;
    case normalizeInput(stringifyPitch(G, options)): return G;
    case normalizeInput(stringifyPitch(GG, options)): return GG;
    case normalizeInput(stringifyPitch(GGG, options)): return GGG;
    case normalizeInput(stringifyPitch(GGGG, options)): return GGGG;
    case normalizeInput(stringifyPitch(Gb, options)): return Gb;
    case normalizeInput(stringifyPitch(Gbb, options)): return Gbb;
    case normalizeInput(stringifyPitch(Gbbb, options)): return Gbbb;
    case normalizeInput(stringifyPitch(A, options)): return A;
    case normalizeInput(stringifyPitch(AA, options)): return AA;
    case normalizeInput(stringifyPitch(AAA, options)): return AAA;
    case normalizeInput(stringifyPitch(AAAA, options)): return AAAA;
    case normalizeInput(stringifyPitch(Ab, options)): return Ab;
    case normalizeInput(stringifyPitch(Abb, options)): return Abb;
    case normalizeInput(stringifyPitch(Abbb, options)): return Abbb;
    case normalizeInput(stringifyPitch(B, options)): return B;
    case normalizeInput(stringifyPitch(BB, options)): return BB;
    case normalizeInput(stringifyPitch(BBB, options)): return BBB;
    case normalizeInput(stringifyPitch(BBBB, options)): return BBBB;
    case normalizeInput(stringifyPitch(Bb, options)): return Bb;
    case normalizeInput(stringifyPitch(Bbb, options)): return Bbb;
    case normalizeInput(stringifyPitch(Bbbb, options)): return Bbbb;
    default: return null;
  }
}
