import { DiatonicAlt } from "../../../../..";
import { SPNAlt } from "../../SPNAlt";

const precalcCases: [SPNAlt, DiatonicAlt, number][] = [
    [SPNAlt.C_S1, DiatonicAlt.C, -1],
    [SPNAlt.CC_S1, DiatonicAlt.CC, -1],
    [SPNAlt.D_S1, DiatonicAlt.D, -1],
    [SPNAlt.DD_S1, DiatonicAlt.DD, -1],
    [SPNAlt.E_S1, DiatonicAlt.E, -1],
    [SPNAlt.F_S1, DiatonicAlt.F, -1],
    [SPNAlt.FF_S1, DiatonicAlt.FF, -1],
    [SPNAlt.G_S1, DiatonicAlt.G, -1],
    [SPNAlt.GG_S1, DiatonicAlt.GG, -1],
    [SPNAlt.A_S1, DiatonicAlt.A, -1],
    [SPNAlt.AA_S1, DiatonicAlt.AA, -1],
    [SPNAlt.B_S1, DiatonicAlt.B, -1],
    [SPNAlt.C0, DiatonicAlt.C, 0],
    [SPNAlt.CC0, DiatonicAlt.CC, 0],
    [SPNAlt.D0, DiatonicAlt.D, 0],
    [SPNAlt.DD0, DiatonicAlt.DD, 0],
    [SPNAlt.E0, DiatonicAlt.E, 0],
    [SPNAlt.F0, DiatonicAlt.F, 0],
    [SPNAlt.FF0, DiatonicAlt.FF, 0],
    [SPNAlt.G0, DiatonicAlt.G, 0],
    [SPNAlt.GG0, DiatonicAlt.GG, 0],
    [SPNAlt.A0, DiatonicAlt.A, 0],
    [SPNAlt.AA0, DiatonicAlt.AA, 0],
    [SPNAlt.B0, DiatonicAlt.B, 0],
    [SPNAlt.C1, DiatonicAlt.C, 1],
    [SPNAlt.CC1, DiatonicAlt.CC, 1],
    [SPNAlt.D1, DiatonicAlt.D, 1],
    [SPNAlt.DD1, DiatonicAlt.DD, 1],
    [SPNAlt.E1, DiatonicAlt.E, 1],
    [SPNAlt.F1, DiatonicAlt.F, 1],
    [SPNAlt.FF1, DiatonicAlt.FF, 1],
    [SPNAlt.G1, DiatonicAlt.G, 1],
    [SPNAlt.GG1, DiatonicAlt.GG, 1],
    [SPNAlt.A1, DiatonicAlt.A, 1],
    [SPNAlt.AA1, DiatonicAlt.AA, 1],
    [SPNAlt.B1, DiatonicAlt.B, 1],
    [SPNAlt.C2, DiatonicAlt.C, 2],
    [SPNAlt.CC2, DiatonicAlt.CC, 2],
    [SPNAlt.D2, DiatonicAlt.D, 2],
    [SPNAlt.DD2, DiatonicAlt.DD, 2],
    [SPNAlt.E2, DiatonicAlt.E, 2],
    [SPNAlt.F2, DiatonicAlt.F, 2],
    [SPNAlt.FF2, DiatonicAlt.FF, 2],
    [SPNAlt.G2, DiatonicAlt.G, 2],
    [SPNAlt.GG2, DiatonicAlt.GG, 2],
    [SPNAlt.A2, DiatonicAlt.A, 2],
    [SPNAlt.AA2, DiatonicAlt.AA, 2],
    [SPNAlt.B2, DiatonicAlt.B, 2],
    [SPNAlt.C3, DiatonicAlt.C, 3],
    [SPNAlt.CC3, DiatonicAlt.CC, 3],
    [SPNAlt.D3, DiatonicAlt.D, 3],
    [SPNAlt.DD3, DiatonicAlt.DD, 3],
    [SPNAlt.E3, DiatonicAlt.E, 3],
    [SPNAlt.F3, DiatonicAlt.F, 3],
    [SPNAlt.FF3, DiatonicAlt.FF, 3],
    [SPNAlt.G3, DiatonicAlt.G, 3],
    [SPNAlt.GG3, DiatonicAlt.GG, 3],
    [SPNAlt.A3, DiatonicAlt.A, 3],
    [SPNAlt.AA3, DiatonicAlt.AA, 3],
    [SPNAlt.B3, DiatonicAlt.B, 3],
    [SPNAlt.C4, DiatonicAlt.C, 4],
    [SPNAlt.CC4, DiatonicAlt.CC, 4],
    [SPNAlt.D4, DiatonicAlt.D, 4],
    [SPNAlt.DD4, DiatonicAlt.DD, 4],
    [SPNAlt.E4, DiatonicAlt.E, 4],
    [SPNAlt.F4, DiatonicAlt.F, 4],
    [SPNAlt.FF4, DiatonicAlt.FF, 4],
    [SPNAlt.G4, DiatonicAlt.G, 4],
    [SPNAlt.GG4, DiatonicAlt.GG, 4],
    [SPNAlt.A4, DiatonicAlt.A, 4],
    [SPNAlt.AA4, DiatonicAlt.AA, 4],
    [SPNAlt.B4, DiatonicAlt.B, 4],
    [SPNAlt.C5, DiatonicAlt.C, 5],
    [SPNAlt.CC5, DiatonicAlt.CC, 5],
    [SPNAlt.D5, DiatonicAlt.D, 5],
    [SPNAlt.DD5, DiatonicAlt.DD, 5],
    [SPNAlt.E5, DiatonicAlt.E, 5],
    [SPNAlt.F5, DiatonicAlt.F, 5],
    [SPNAlt.FF5, DiatonicAlt.FF, 5],
    [SPNAlt.G5, DiatonicAlt.G, 5],
    [SPNAlt.GG5, DiatonicAlt.GG, 5],
    [SPNAlt.A5, DiatonicAlt.A, 5],
    [SPNAlt.AA5, DiatonicAlt.AA, 5],
    [SPNAlt.B5, DiatonicAlt.B, 5],
    [SPNAlt.C6, DiatonicAlt.C, 6],
    [SPNAlt.CC6, DiatonicAlt.CC, 6],
    [SPNAlt.D6, DiatonicAlt.D, 6],
    [SPNAlt.DD6, DiatonicAlt.DD, 6],
    [SPNAlt.E6, DiatonicAlt.E, 6],
    [SPNAlt.F6, DiatonicAlt.F, 6],
    [SPNAlt.FF6, DiatonicAlt.FF, 6],
    [SPNAlt.G6, DiatonicAlt.G, 6],
    [SPNAlt.GG6, DiatonicAlt.GG, 6],
    [SPNAlt.A6, DiatonicAlt.A, 6],
    [SPNAlt.AA6, DiatonicAlt.AA, 6],
    [SPNAlt.B6, DiatonicAlt.B, 6],
    [SPNAlt.C7, DiatonicAlt.C, 7],
    [SPNAlt.CC7, DiatonicAlt.CC, 7],
    [SPNAlt.D7, DiatonicAlt.D, 7],
    [SPNAlt.DD7, DiatonicAlt.DD, 7],
    [SPNAlt.E7, DiatonicAlt.E, 7],
    [SPNAlt.F7, DiatonicAlt.F, 7],
    [SPNAlt.FF7, DiatonicAlt.FF, 7],
    [SPNAlt.G7, DiatonicAlt.G, 7],
    [SPNAlt.GG7, DiatonicAlt.GG, 7],
    [SPNAlt.A7, DiatonicAlt.A, 7],
    [SPNAlt.AA7, DiatonicAlt.AA, 7],
    [SPNAlt.B7, DiatonicAlt.B, 7],
    [SPNAlt.C8, DiatonicAlt.C, 8],
    [SPNAlt.CC8, DiatonicAlt.CC, 8],
    [SPNAlt.D8, DiatonicAlt.D, 8],
    [SPNAlt.DD8, DiatonicAlt.DD, 8],
    [SPNAlt.E8, DiatonicAlt.E, 8],
    [SPNAlt.F8, DiatonicAlt.F, 8],
    [SPNAlt.FF8, DiatonicAlt.FF, 8],
    [SPNAlt.G8, DiatonicAlt.G, 8],
    [SPNAlt.GG8, DiatonicAlt.GG, 8],
    [SPNAlt.A8, DiatonicAlt.A, 8],
    [SPNAlt.AA8, DiatonicAlt.AA, 8],
    [SPNAlt.B8, DiatonicAlt.B, 8],
    [SPNAlt.C9, DiatonicAlt.C, 9],
    [SPNAlt.CC9, DiatonicAlt.CC, 9],
    [SPNAlt.D9, DiatonicAlt.D, 9],
    [SPNAlt.DD9, DiatonicAlt.DD, 9],
    [SPNAlt.E9, DiatonicAlt.E, 9],
    [SPNAlt.F9, DiatonicAlt.F, 9],
    [SPNAlt.FF9, DiatonicAlt.FF, 9],
    [SPNAlt.G9, DiatonicAlt.G, 9],
    [SPNAlt.GG9, DiatonicAlt.GG, 9],
    [SPNAlt.A9, DiatonicAlt.A, 9],
    [SPNAlt.AA9, DiatonicAlt.AA, 9]
];
describe.each(precalcCases)
    ('toString', (base: SPNAlt, expectedDiatonicAlt: DiatonicAlt, expectedOctave: number) => {
        let diatonicAlt: DiatonicAlt = base.degree;
        let octave = base.octave;
        it(`SPNAlt=${base} actualDegree=${base.degree} actualOctave=${base.octave}`, () => {
            expect(diatonicAlt).toBe(expectedDiatonicAlt);
            expect(octave).toBe(expectedOctave);
        })
    });