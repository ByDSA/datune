import { A, AA, B, C, CC, D, DD, E, F, FF, G, GG, Pitch as OctavePitch } from "pitches/alt";
import { TestInit } from "tests";
import { A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, AA0, AA1, AA2, AA3, AA4, AA5, AA6, AA7, AA8, AA9, AA_S1, A_S1, B0, B1, B2, B3, B4, B5, B6, B7, B8, B_S1, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, CC0, CC1, CC2, CC3, CC4, CC5, CC6, CC7, CC8, CC9, CC_S1, COMMON, C_S1, D0, D1, D2, D3, D4, D5, D6, D7, D8, D9, DD0, DD1, DD2, DD3, DD4, DD5, DD6, DD7, DD8, DD9, DD_S1, D_S1, E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E_S1, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, FF0, FF1, FF2, FF3, FF4, FF5, FF6, FF7, FF8, FF9, FF_S1, F_S1, G0, G1, G2, G3, G4, G5, G6, G7, G8, G9, GG0, GG1, GG2, GG3, GG4, GG5, GG6, GG7, GG8, GG9, GG_S1, G_S1 } from ".";
import SPN from "../SPN";

TestInit.diatonicAltSPN();

const precalcCases: [SPN, OctavePitch, number][] = [
  [C_S1, C, -1],
  [CC_S1, CC, -1],
  [D_S1, D, -1],
  [DD_S1, DD, -1],
  [E_S1, E, -1],
  [F_S1, F, -1],
  [FF_S1, FF, -1],
  [G_S1, G, -1],
  [GG_S1, GG, -1],
  [A_S1, A, -1],
  [AA_S1, AA, -1],
  [B_S1, B, -1],
  [C0, C, 0],
  [CC0, CC, 0],
  [D0, D, 0],
  [DD0, DD, 0],
  [E0, E, 0],
  [F0, F, 0],
  [FF0, FF, 0],
  [G0, G, 0],
  [GG0, GG, 0],
  [A0, A, 0],
  [AA0, AA, 0],
  [B0, B, 0],
  [C1, C, 1],
  [CC1, CC, 1],
  [D1, D, 1],
  [DD1, DD, 1],
  [E1, E, 1],
  [F1, F, 1],
  [FF1, FF, 1],
  [G1, G, 1],
  [GG1, GG, 1],
  [A1, A, 1],
  [AA1, AA, 1],
  [B1, B, 1],
  [C2, C, 2],
  [CC2, CC, 2],
  [D2, D, 2],
  [DD2, DD, 2],
  [E2, E, 2],
  [F2, F, 2],
  [FF2, FF, 2],
  [G2, G, 2],
  [GG2, GG, 2],
  [A2, A, 2],
  [AA2, AA, 2],
  [B2, B, 2],
  [C3, C, 3],
  [CC3, CC, 3],
  [D3, D, 3],
  [DD3, DD, 3],
  [E3, E, 3],
  [F3, F, 3],
  [FF3, FF, 3],
  [G3, G, 3],
  [GG3, GG, 3],
  [A3, A, 3],
  [AA3, AA, 3],
  [B3, B, 3],
  [C4, C, 4],
  [CC4, CC, 4],
  [D4, D, 4],
  [DD4, DD, 4],
  [E4, E, 4],
  [F4, F, 4],
  [FF4, FF, 4],
  [G4, G, 4],
  [GG4, GG, 4],
  [A4, A, 4],
  [AA4, AA, 4],
  [B4, B, 4],
  [C5, C, 5],
  [CC5, CC, 5],
  [D5, D, 5],
  [DD5, DD, 5],
  [E5, E, 5],
  [F5, F, 5],
  [FF5, FF, 5],
  [G5, G, 5],
  [GG5, GG, 5],
  [A5, A, 5],
  [AA5, AA, 5],
  [B5, B, 5],
  [C6, C, 6],
  [CC6, CC, 6],
  [D6, D, 6],
  [DD6, DD, 6],
  [E6, E, 6],
  [F6, F, 6],
  [FF6, FF, 6],
  [G6, G, 6],
  [GG6, GG, 6],
  [A6, A, 6],
  [AA6, AA, 6],
  [B6, B, 6],
  [C7, C, 7],
  [CC7, CC, 7],
  [D7, D, 7],
  [DD7, DD, 7],
  [E7, E, 7],
  [F7, F, 7],
  [FF7, FF, 7],
  [G7, G, 7],
  [GG7, GG, 7],
  [A7, A, 7],
  [AA7, AA, 7],
  [B7, B, 7],
  [C8, C, 8],
  [CC8, CC, 8],
  [D8, D, 8],
  [DD8, DD, 8],
  [E8, E, 8],
  [F8, F, 8],
  [FF8, FF, 8],
  [G8, G, 8],
  [GG8, GG, 8],
  [A8, A, 8],
  [AA8, AA, 8],
  [B8, B, 8],
  [C9, C, 9],
  [CC9, CC, 9],
  [D9, D, 9],
  [DD9, DD, 9],
  [E9, E, 9],
  [F9, F, 9],
  [FF9, FF, 9],
  [G9, G, 9],
  [GG9, GG, 9],
  [A9, A, 9],
  [AA9, AA, 9],
];

describe.each(precalcCases)("tests", (base: SPN, expectedPitch: OctavePitch, expectedOctave: number) => {
  const { pitch, octave } = base;
  const expectedPitchName = expectedPitch.toString();
  const spnName = base.toString();

  describe(`SPN=${spnName}`, () => {
    it(`pitch=${expectedPitchName}`, () => {
      expect(pitch).toBe(expectedPitch);
    } );
    it(`octave=${expectedOctave}`, () => {
      expect(octave).toBe(expectedOctave);
    } );
  } );
} );

describe.each(COMMON)("defined", (spn: SPN) => {
  it("defined", () => {
    expect(spn).toBeDefined();
  } );
} );
